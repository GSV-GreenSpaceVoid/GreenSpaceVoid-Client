package com.greenspacevoid.client.ui.menus.ui.main;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class ShipInfoPanel {
    private JInternalFrame frame;
    private JPanel shipInfoPane;
    private JTree moduleTree;
    private JProgressBar shieldBar;
    private JProgressBar hullBar;
    private JProgressBar structureBar;
    private JProgressBar speedBar;
    private JProgressBar capacitorBar;
    private JPanel statusPanel;
    private JScrollPane moduleScrollPane;
    private JTable buffTable;
    private JLabel currentActionLabel;
    private JPanel buffsPanel;
    private JScrollPane buffsScrollpane;

    public ShipInfoPanel() {

    }

    public static ShipInfoPanel generateShipInfoPanel() {
        ShipInfoPanel shipInfoPanel = new ShipInfoPanel();
        shipInfoPanel.setFrame(new JInternalFrame("ShipInfoPanel"));
        shipInfoPanel.getFrame().setContentPane(new ShipInfoPanel().shipInfoPane);
        shipInfoPanel.getFrame().setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        shipInfoPanel.getFrame().pack();
        shipInfoPanel.getFrame().setVisible(true);
        return shipInfoPanel;
    }

    public JInternalFrame getFrame() {
        return frame;
    }

    public JPanel getShipInfoPane() {
        return shipInfoPane;
    }

    public JTree getModuleTree() {
        return moduleTree;
    }

    public JProgressBar getShieldBar() {
        return shieldBar;
    }

    public JProgressBar getHullBar() {
        return hullBar;
    }

    public JProgressBar getStructureBar() {
        return structureBar;
    }

    public JProgressBar getSpeedBar() {
        return speedBar;
    }

    public JProgressBar getCapacitorBar() {
        return capacitorBar;
    }

    public JPanel getStatusPanel() {
        return statusPanel;
    }

    public JScrollPane getModuleScrollPane() {
        return moduleScrollPane;
    }

    public JTable getBuffTable() {
        return buffTable;
    }

    public JLabel getCurrentActionLabel() {
        return currentActionLabel;
    }

    public JPanel getBuffsPanel() {
        return buffsPanel;
    }

    public JScrollPane getBuffsScrollpane() {
        return buffsScrollpane;
    }


    public void setFrame(JInternalFrame frame) {
        this.frame = frame;
    }

    public void setShipInfoPane(JPanel shipInfoPane) {
        this.shipInfoPane = shipInfoPane;
    }

    public void setModuleTree(JTree moduleTree) {
        this.moduleTree = moduleTree;
    }

    public void setShieldBar(JProgressBar shieldBar) {
        this.shieldBar = shieldBar;
    }

    public void setHullBar(JProgressBar hullBar) {
        this.hullBar = hullBar;
    }

    public void setStructureBar(JProgressBar structureBar) {
        this.structureBar = structureBar;
    }

    public void setSpeedBar(JProgressBar speedBar) {
        this.speedBar = speedBar;
    }

    public void setCapacitorBar(JProgressBar capacitorBar) {
        this.capacitorBar = capacitorBar;
    }

    public void setStatusPanel(JPanel statusPanel) {
        this.statusPanel = statusPanel;
    }

    public void setModuleScrollPane(JScrollPane moduleScrollPane) {
        this.moduleScrollPane = moduleScrollPane;
    }

    public void setBuffTable(JTable buffTable) {
        this.buffTable = buffTable;
    }

    public void setCurrentActionLabel(JLabel currentActionLabel) {
        this.currentActionLabel = currentActionLabel;
    }

    public void setBuffsPanel(JPanel buffsPanel) {
        this.buffsPanel = buffsPanel;
    }

    public void setBuffsScrollpane(JScrollPane buffsScrollpane) {
        this.buffsScrollpane = buffsScrollpane;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        shipInfoPane = new JPanel();
        shipInfoPane.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
        shipInfoPane.setMinimumSize(new Dimension(400, 208));
        shipInfoPane.setPreferredSize(new Dimension(600, 208));
        final JLabel label1 = new JLabel();
        label1.setText("Modules:");
        shipInfoPane.add(label1, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        statusPanel = new JPanel();
        statusPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        shipInfoPane.add(statusPanel, new GridConstraints(0, 2, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        hullBar = new JProgressBar();
        hullBar.setOrientation(1);
        hullBar.setString("Hull: %/%");
        hullBar.setStringPainted(true);
        statusPanel.add(hullBar, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        shieldBar = new JProgressBar();
        shieldBar.setForeground(new Color(-16731137));
        shieldBar.setOrientation(1);
        shieldBar.setString("Shields: %/%");
        shieldBar.setStringPainted(true);
        shieldBar.setValue(50);
        statusPanel.add(shieldBar, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        structureBar = new JProgressBar();
        structureBar.setOrientation(1);
        structureBar.setString("Structure: %/%");
        structureBar.setStringPainted(true);
        statusPanel.add(structureBar, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        speedBar = new JProgressBar();
        speedBar.setString("Speed: x m/s or AUs");
        speedBar.setStringPainted(true);
        statusPanel.add(speedBar, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        capacitorBar = new JProgressBar();
        capacitorBar.setString("Capacitor: %/%");
        capacitorBar.setStringPainted(true);
        statusPanel.add(capacitorBar, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        moduleScrollPane = new JScrollPane();
        shipInfoPane.add(moduleScrollPane, new GridConstraints(1, 3, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        moduleTree = new JTree();
        moduleScrollPane.setViewportView(moduleTree);
        final Spacer spacer1 = new Spacer();
        shipInfoPane.add(spacer1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        buffsPanel = new JPanel();
        buffsPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        shipInfoPane.add(buffsPanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(50, -1), null, 0, false));
        buffsScrollpane = new JScrollPane();
        buffsPanel.add(buffsScrollpane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        buffsScrollpane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), "Buffs/Debuffs", TitledBorder.LEFT, TitledBorder.DEFAULT_POSITION, null, null));
        buffTable = new JTable();
        buffTable.setPreferredScrollableViewportSize(new Dimension(350, 400));
        buffsScrollpane.setViewportView(buffTable);
        currentActionLabel = new JLabel();
        currentActionLabel.setText("Current Action:");
        shipInfoPane.add(currentActionLabel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return shipInfoPane;
    }

}
