package com.greenspacevoid.client.ui.menus.ui.main;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

public class TargetingPane {
    private JPanel targetingPane;
    private JLabel thingsOfInterestLabel;
    private JTable table1;
    private JTable table2;
    private JTable table3;
    private JLabel offensiveDevices;
    private JLabel targetsLabel;
    private JButton overHeatAllModulesButton;
    private JButton viewDroneCarrierMenuButton;
    private JButton stopOverdrivingAllOffensiveButton;
    private JButton lockOnToNearestButton;
    private JButton volleyAtClosestTargetButton;
    private JButton lockOnToNearestButton1;
    private JTextPane targetInfoPane;
    private JProgressBar progressBar1;
    private JProgressBar progressBar2;
    private JProgressBar progressBar3;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        targetingPane = new JPanel();
        targetingPane.setLayout(new GridLayoutManager(12, 11, new Insets(0, 0, 0, 0), -1, -1));
        targetingPane.setBackground(new Color(-16777216));
        targetingPane.setForeground(new Color(-16711936));
        targetingPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), "Targeting Menu", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$("Courier New", -1, -1, targetingPane.getFont()), new Color(-16711936)));
        table1 = new JTable();
        table1.setCellSelectionEnabled(true);
        table1.putClientProperty("JTable.autoStartsEdit", Boolean.FALSE);
        targetingPane.add(table1, new GridConstraints(1, 0, 1, 7, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        table3 = new JTable();
        targetingPane.add(table3, new GridConstraints(3, 0, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        thingsOfInterestLabel = new JLabel();
        Font thingsOfInterestLabelFont = this.$$$getFont$$$("Courier New", -1, -1, thingsOfInterestLabel.getFont());
        if (thingsOfInterestLabelFont != null) thingsOfInterestLabel.setFont(thingsOfInterestLabelFont);
        thingsOfInterestLabel.setForeground(new Color(-16711936));
        thingsOfInterestLabel.setText("Objects Of Interest:");
        targetingPane.add(thingsOfInterestLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        offensiveDevices = new JLabel();
        offensiveDevices.setBackground(new Color(-16777216));
        Font offensiveDevicesFont = this.$$$getFont$$$("Courier New", -1, -1, offensiveDevices.getFont());
        if (offensiveDevicesFont != null) offensiveDevices.setFont(offensiveDevicesFont);
        offensiveDevices.setForeground(new Color(-16711936));
        offensiveDevices.setText("Offensive/Harvesting Devices:");
        targetingPane.add(offensiveDevices, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        targetsLabel = new JLabel();
        targetsLabel.setBackground(new Color(-16777216));
        Font targetsLabelFont = this.$$$getFont$$$("Courier New", -1, -1, targetsLabel.getFont());
        if (targetsLabelFont != null) targetsLabel.setFont(targetsLabelFont);
        targetsLabel.setForeground(new Color(-16711936));
        targetsLabel.setText("Locked-On Targets:");
        targetingPane.add(targetsLabel, new GridConstraints(2, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        table2 = new JTable();
        targetingPane.add(table2, new GridConstraints(3, 2, 3, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        stopOverdrivingAllOffensiveButton = new JButton();
        stopOverdrivingAllOffensiveButton.setText("Stop Overdriving All Offensive Modules");
        targetingPane.add(stopOverdrivingAllOffensiveButton, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        overHeatAllModulesButton = new JButton();
        overHeatAllModulesButton.setText("Overdrive All Offensive Modules");
        targetingPane.add(overHeatAllModulesButton, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        viewDroneCarrierMenuButton = new JButton();
        viewDroneCarrierMenuButton.setText("View Drone/Carrier Menu");
        targetingPane.add(viewDroneCarrierMenuButton, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        targetInfoPane = new JTextPane();
        targetInfoPane.setEditable(false);
        targetInfoPane.setText("Target Info:");
        targetingPane.add(targetInfoPane, new GridConstraints(6, 2, 3, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        lockOnToNearestButton1 = new JButton();
        lockOnToNearestButton1.setText("Lock-On To Nearest Asteroid");
        targetingPane.add(lockOnToNearestButton1, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lockOnToNearestButton = new JButton();
        lockOnToNearestButton.setText("Lock-On to Nearest Ship");
        targetingPane.add(lockOnToNearestButton, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        volleyAtClosestTargetButton = new JButton();
        volleyAtClosestTargetButton.setText("Volley at Closest Target");
        targetingPane.add(volleyAtClosestTargetButton, new GridConstraints(11, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        progressBar1 = new JProgressBar();
        progressBar1.setOrientation(1);
        targetingPane.add(progressBar1, new GridConstraints(10, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        progressBar2 = new JProgressBar();
        progressBar2.setOrientation(1);
        targetingPane.add(progressBar2, new GridConstraints(10, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        progressBar3 = new JProgressBar();
        progressBar3.setOrientation(1);
        targetingPane.add(progressBar3, new GridConstraints(10, 4, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return targetingPane;
    }
}
