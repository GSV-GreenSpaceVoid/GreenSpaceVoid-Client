package com.greenspacevoidcore.client.menus.login.connectingPanes;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class LoadingPane {
    private JTextPane ConnectingTextPane;
    private JPanel LoadingPanel;
    private JProgressBar progressBar1;


    public void displayFailedToConnect() {
        //Default thing that happens if Kryo can't connect

        ConnectingTextPane.setText("FAILED TO CONNECT! \n Try again");

    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        LoadingPanel = new JPanel();
        LoadingPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        LoadingPanel.setBackground(new Color(-16777216));
        LoadingPanel.setFocusable(false);
        LoadingPanel.setForeground(new Color(-16777216));
        LoadingPanel.setName("GSV Client");
        LoadingPanel.setPreferredSize(new Dimension(768, 384));
        LoadingPanel.setRequestFocusEnabled(false);
        LoadingPanel.setVerifyInputWhenFocusTarget(true);
        LoadingPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Loading Green Space Void...", TitledBorder.LEADING, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$("Courier New", -1, -1, LoadingPanel.getFont()), new Color(-16711936)));
        ConnectingTextPane = new JTextPane();
        ConnectingTextPane.setAutoscrolls(false);
        ConnectingTextPane.setBackground(new Color(-16777216));
        ConnectingTextPane.setCaretColor(new Color(-16711936));
        ConnectingTextPane.setEditable(false);
        ConnectingTextPane.setEnabled(true);
        Font ConnectingTextPaneFont = this.$$$getFont$$$("Courier New", Font.BOLD, 26, ConnectingTextPane.getFont());
        if (ConnectingTextPaneFont != null) ConnectingTextPane.setFont(ConnectingTextPaneFont);
        ConnectingTextPane.setForeground(new Color(-16711936));
        ConnectingTextPane.setInheritsPopupMenu(false);
        ConnectingTextPane.setOpaque(true);
        ConnectingTextPane.setSelectionColor(new Color(-16777216));
        ConnectingTextPane.setText("Connecting to Green Space Void!");
        LoadingPanel.add(ConnectingTextPane, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(300, 50), null, 0, false));
        progressBar1 = new JProgressBar();
        progressBar1.setBackground(new Color(-16777216));
        progressBar1.setEnabled(false);
        progressBar1.setForeground(new Color(-16711936));
        progressBar1.setIndeterminate(true);
        progressBar1.setString("Loading...");
        progressBar1.setStringPainted(true);
        LoadingPanel.add(progressBar1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        LoadingPanel.add(spacer1, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        LoadingPanel.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return LoadingPanel;
    }

}
